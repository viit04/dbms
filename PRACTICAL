
--------------------------------------------------------ASSIGNMENT 2 SQL DDL DML ----------------------------------------------------------

CREATE DATABASE assignment2;

USE assignment2;

CREATE TABLE VULIBRARY (
LibraryID INT PRIMARY KEY,
LibraryName VARCHAR(55) NOT NULL,
Location VARCHAR(55) NOT NULL,
NumberOfBranches INT CHECK (NumberOfBranches >= 0)
);

INSERT INTO VULIBRARY (LibraryID, LibraryName, Location, NumberOfBranches)
VALUES
(4, 'North Library', 'North Street', 1),
(5, 'West Library', 'West Avenue', 2),
(6, 'East Library', 'East Road', 3),
(7, 'South Library', 'South Lane', 1),
(8, 'University Library', 'Campus Avenue', 5);

Which institute libraries are located in pune city?
SELECT * FROM Ilibrary WHERE city = 'Pune';

To which institute CS department belongs to?
SELECT * FROM DEPARTMENT WHERE deptname = 'CS';

Find all the books whose price is between 800 to 12000?
SELECT * FROM BOOKS WHERE Price BETWEEN 800 AND 12000;

Find out such employees who's salaries are not greater than 50,000/-
SELECT * FROM Employee WHERE salary <= 50000;

Find out such sellers who's name end with "ta"
SELECT * FROM SELLER WHERE slname LIKE '%ta';

Find out such institute libraries where their area information is missing.
SELECT * FROM Ilibrary WHERE area IS NULL;

Find out such staff members who's name doesn't starts with "A"
SELECT * FROM STAFF WHERE stname NOT LIKE 'A%';

Find out such VU libraries which have institute libraries located in Bangalore.
SELECT * FROM VULIBRARY WHERE Slid IN (SELECT slid FROM Ilibrary WHERE city = 'Bangalore');

Which students belong to civil department?
SELECT * FROM STUDENT WHERE deptid = (SELECT DeptId FROM DEPARTMENT WHERE deptname = 'civil');

Find out books which are written by "shruti" and published by Mcgraw hill?
SELECT * FROM BOOKS
WHERE Bid IN (SELECT Bid FROM Writes WHERE Aid = (SELECT Aid FROM AUTHOR WHERE Aname = 'Shruti'))
AND Lid IN (SELECT Pid FROM PUBLISHER WHERE Pname = 'Mcgraw Hill');


--------------------------------------------------------ASSIGNMENT 3 SQL FUNCTIONS(AVG ,COUNT ,SUM ,MAX ,MIN) ----------------------------------------------------------

ASSIGNMENT-3 

-- Create tables

-- Libraries table
CREATE TABLE Libraries (
    library_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100)
);

-- Books table
CREATE TABLE Books (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(100),
    author VARCHAR(100),
    cost DECIMAL(10, 2),
    copies INT,
    library_id INT,
    publisher_id INT,
    FOREIGN KEY (library_id) REFERENCES Libraries(library_id),
    FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id)
);

-- Purchasers table
CREATE TABLE Purchasers (
    purchaser_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100)
);

-- Purchases table
CREATE TABLE Purchases (
    purchase_id INT PRIMARY KEY AUTO_INCREMENT,
    purchaser_id INT,
    total_cost DECIMAL(10, 2),
    purchase_date DATE,
    FOREIGN KEY (purchaser_id) REFERENCES Purchasers(purchaser_id)
);

-- Authors table
CREATE TABLE Authors (
    author_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100)
);

-- Publishers table
CREATE TABLE Publishers (
    publisher_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100)
);

-- Sellers table
CREATE TABLE Sellers (
    seller_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100),
    city VARCHAR(100)
);

-- Students table
CREATE TABLE Students (
    student_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100),
    college_id INT,
    FOREIGN KEY (college_id) REFERENCES Colleges(college_id)
);

-- Issued_books table
CREATE TABLE Issued_books (
    issue_id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT,
    book_id INT,
    issue_date DATE,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id)
);

-- Insert data

-- Inserting data into Libraries table
INSERT INTO Libraries (name) VALUES
('SIBM'),
('VIT'),
('VU');

-- Inserting data into Books table
INSERT INTO Books (title, author, cost, copies, library_id, publisher_id) VALUES
('Book1', 'Author1', 10.50, 100, 1, 1),
('Book2', 'Author2', 15.75, 150, 2, 2),
('Book3', 'Author3', 20.25, 200, 3, 3);

-- Inserting data into Purchasers table
INSERT INTO Purchasers (name) VALUES
('VU'),
('XYZ'),
('ABC');

-- Inserting data into Purchases table
INSERT INTO Purchases (purchaser_id, total_cost, purchase_date) VALUES
(1, 105.00, '2024-01-15'),
(2, 157.50, '2024-02-20'),
(3, 202.50, '2024-03-25');

-- Inserting data into Authors table
INSERT INTO Authors (name) VALUES
('Author1'),
('Author2'),
('Author3');

-- Inserting data into Publishers table
INSERT INTO Publishers (name) VALUES
('Publisher1'),
('Publisher2'),
('Publisher3');

-- Inserting data into Sellers table
INSERT INTO Sellers (name, city) VALUES
('Seller1', 'Nagpur'),
('Seller2', 'Mumbai'),
('Seller3', 'Pune');

-- Inserting data into Students table
INSERT INTO Students (name, college_id) VALUES
('Student1', 2),
('Student2', 3),
('Student3', 1);

-- Inserting data into Issued_books table
INSERT INTO Issued_books (student_id, book_id, issue_date) VALUES
(1, 1, '2024-01-05'),
(2, 2, '2024-02-10'),
(3, 3, '2024-03-15');


----------QUESTIONS-----------

3a) 1. Find the cheapest book of SIBM library. ?

SELECT MIN(cost) AS cheapest_book_cost 
FROM books 
WHERE library_id = (SELECT library_id FROM libraries WHERE name = 'SIBM'); 

2. Which library has the costliest book? 

SELECT l.name AS library_name 
FROM libraries l 
JOIN books b ON l.library_id = b.library_id 
ORDER BY b.cost DESC 
LIMIT 1; 

3. How many students from VIT issued the book? 

SELECT COUNT(DISTINCT student_id) AS vit_students_issued_books FROM issued_books 
WHERE library_id = (SELECT library_id FROM libraries WHERE name = 'VIT'); 

4. What is the average cost of books in VIT library? 

SELECT AVG(cost) AS average_cost 
FROM books 
WHERE library_id = (SELECT library_id FROM libraries WHERE name = 'VIT');

5. What is the total cost of purchase made by VU in the month of January? 

SELECT SUM(total_cost) AS total_cost_january 
FROM purchases 
WHERE purchaser_id = (SELECT purchaser_id FROM purchasers WHERE name = 'VU') 
AND MONTH(purchase_date) = 1; 

6. How many books are written by “Shruti”? 

SELECT COUNT(*) AS shruti_books_count 
FROM books 
WHERE author_id = (SELECT author_id FROM authors WHERE name = 'Shruti');
 
7. What is the costliest book published by “Pragati Book Store”?

SELECT MAX(cost) AS costliest_book_cost 
FROM books 
WHERE publisher_id = (SELECT publisher_id FROM publishers WHERE name = 'Pragati Book Store'); 

8. How many total copies of books does VIT have? 

SELECT SUM(copies) AS total_vit_books_copies 
FROM books
WHERE library_id = (SELECT library_id FROM libraries WHERE name = 'VIT'); 

9. What is the average cost of books written by “Mr. Kumar”? 

SELECT AVG(cost) AS average_cost_mr_kumar_books 
FROM books 
WHERE author_id = (SELECT author_id FROM authors WHERE name = 'Mr. Kumar'); 

10. How many books are sold by sellers living in Nagpur?

SELECT COUNT(*) AS books_sold_nagpur_sellers 
FROM purchases 
WHERE seller_id IN (SELECT seller_id FROM sellers WHERE city = 'Nagpur'); 

11. Print the student name in capital who belongs to VIT?

SELECT UPPER(name) AS capital_student_name 
FROM students 
WHERE college_id = (SELECT college_id FROM colleges WHERE name = 'VIT'); 

12. Add two months to the issue date of book written by “Ameya” UPDATE issued_books ?

SET issue_date = DATE_ADD(issue_date, INTERVAL 2 MONTH)
WHERE book_id IN (SELECT book_id FROM books WHERE author_id = (SELECT author_id FROM authors WHERE name = 'Ameya')); 

13. What was the last day of the month when Ayush issued the book? 

SELECT LAST_DAY(issue_date) AS last_day_of_month 
FROM issued_books 
WHERE student_id = (SELECT student_id FROM students WHERE name = 'Ayush') ORDER BY issue_date DESC 
LIMIT 1; 

14. How many books are issued from January to March 2016? SELECT COUNT(*) AS books_issued_jan_to_mar_2016 

FROM issued_books 
WHERE issue_date BETWEEN '2016-01-01' AND '2016-03-31'; 

3b) 
1. Give library wise book details? 

SELECT l.name AS library_name, b.title AS book_title, b.author, b.cost, b.copies FROM libraries l 
JOIN books b ON l.library_id = b.library_id 
ORDER BY l.name;

2. Give bookwise total copies which are available?

SELECT title AS book_title, SUM(copies) AS total_copies_available FROM books 
GROUP BY title 
ORDER BY title; 

3. Which library has total copies more than 100? 

SELECT l.name AS library_name, SUM(b.copies) AS total_copies FROM libraries l 
JOIN books b ON l.library_id = b.library_id 
GROUP BY l.name 
HAVING total_copies > 100 
ORDER BY total_copies DESC; 

4. Give institute wise department details?

SELECT i.name AS institute_name, d.name AS department_name, COUNT(*) AS total_departments 
FROM institutes i 
JOIN departments d ON i.institute_id = d.institute_id 
GROUP BY i.name, d.name 
ORDER BY i.name, d.name;

5. Give citywise seller details?

SELECT s.city AS seller_city, s.name AS seller_name, COUNT(*) AS total_sellers FROM sellers s 
GROUP BY s.city, s.name 
ORDER BY s.city, s.name;



--------------------------------------------------------ASSIGNMENT 4 SQL OPERATORS (AND, OR, NOT, LIKE)----------------------------------------------------------

CREATE databases crud;
USE crud;

CREATE TABLE student_info (
    name VARCHAR2(20),
    prn NUMBER(8),
    mobile NUMBER(10),
    grade NUMBER(2)
);

-- Insert data into the student_info table
INSERT INTO student_info VALUES ('tanny', 22210485, 91301119, 10);
INSERT INTO student_info VALUES ('vinu', 22210482, 9420485, 5);
INSERT INTO student_info VALUES ('chotu', 22210480, 9423015, 7);
INSERT INTO student_info VALUES ('mitu', 22210481, 9423016, 8);
INSERT INTO student_info VALUES ('monu', 22210483, 9423017, 6);
INSERT INTO student_info VALUES ('sonu', 22210484, 9423018, 4);
show tables;

select distinct * from student_info where
grade>=6 AND grade<=9;

Select distinct *  from student_info where
grade<5 or grade>=7;

Select distinct * from student_info where
grade!=10;

select distinct(name) from student_info where
name like 'm%';

select distinct(name) from  student_info where
grade  between 6 and 9;

select distinct(name) from student_info where
grade in (5,10);


--------------------------------------------------------ASSIGNMENT 9 SQL VIEWS----------------------------------------------------------

CREATE DATABASE assignment9;

USE assignment9;

CREATE TABLE SITELIBRARY (
SITId INT PRIMARY KEY,
SITname VARCHAR(100) NOT NULL,
SITPrice DECIMAL(10, 2) NOT NULL
);

INSERT INTO SITELIBRARY (SITid, SITname, SITPrice)
VALUES
(6, 'famousfive', 150.00),
(7, 'percyjackson', 1000.00),
(8, 'secretseven', 450.00),
(9, 'wingsofcode', 590.00),
(10, 'trails', 2500.00);

CREATE VIEW Books_Cost AS
SELECT SITid, SITname, SITPrice
FROM SITELIBRARY
WHERE SITPrice < 1000;

SELECT * FROM Books_Cost;

-------------------------------------------------------- ASSIGNMENT 5 SQL JOINS ----------------------------------------------------------

-- Create Institute table
CREATE TABLE Institute (
    instid INT PRIMARY KEY,
    instname VARCHAR(50) NOT NULL,
    city VARCHAR(30)
);

-- Create Department table 
CREATE TABLE Department (
    deptid INT PRIMARY KEY,
    deptname VARCHAR(30) NOT NULL,
    instid INT FOREIGN KEY REFERENCES Institute(instid)
);

-- Create Student table
CREATE TABLE Student (
    studid INT PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    deptid INT FOREIGN KEY REFERENCES Department(deptid)
);

-- Create Library table
CREATE TABLE Library (
    libid INT PRIMARY KEY,
    libname VARCHAR(30) NOT NULL,
    city VARCHAR(30)
);

-- Create Borrower table 
CREATE TABLE Borrower (
    brid INT PRIMARY KEY,
    brname VARCHAR(30) NOT NULL,
    instid INT FOREIGN KEY REFERENCES Institute(instid)
);

-- Create Publisher table
CREATE TABLE Publisher (
    pubid INT PRIMARY KEY,
    pubname VARCHAR(50) NOT NULL,
    city VARCHAR(30)
);

-- Create Book table
CREATE TABLE Book (
    bid INT PRIMARY KEY,
    title VARCHAR(50) NOT NULL,
    pubid INT FOREIGN KEY REFERENCES Publisher(pubid),
    price DECIMAL(6,2)
);

-- Create Author table
CREATE TABLE Author (
    aid INT PRIMARY KEY,
    aname VARCHAR(30) NOT NULL,
    bid INT FOREIGN KEY REFERENCES Book(bid)
);

-- Create Seller table
CREATE TABLE Seller (
    sellerid INT PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    city VARCHAR(30)  
);

-- Create Holding table
CREATE TABLE Holding (
    bid INT FOREIGN KEY REFERENCES Book(bid),
    libid INT FOREIGN KEY REFERENCES Library(libid),
    sellerid INT FOREIGN KEY REFERENCES Seller(sellerid),
    nocopies INT,
    PRIMARY KEY (bid, libid, sellerid)
);

-- Create Issue table 
CREATE TABLE Issue (
    bid INT FOREIGN KEY REFERENCES Book(bid),
    brid INT FOREIGN KEY REFERENCES Borrower(brid),
    dateissued DATE,
    PRIMARY KEY (bid, brid)
);

INSERT INTO Institute VALUES
(1, 'VIT', 'Pune'),
(2, 'COEP', 'Pune'),
(3, 'MIT', 'Pune');

Insert data into Department table
INSERT INTO Department VALUES
(1, 'IT', 1),
(2, 'Computer', 1),
(3, 'Mechanical', 2),
(4, 'Civil', 3);

Insert data into Student table
INSERT INTO Student VALUES
(1, 'John', 1),
(2, 'Jane', 1),
(3, 'Bob', 2),
(4, 'Alice', 3),
(5, 'Charlie', 4);

Insert data into Library table
INSERT INTO Library VALUES
(1, 'VIT Library', 'Pune'),
(2, 'COEP Library', 'Pune'),
(3, 'MIT Library', 'Mumbai');

Insert data into Borrower table
INSERT INTO Borrower VALUES
(1, 'Mayank', 1),
(2, 'Shreya', 2),
(3, 'Rohan', 3),
(4, 'Sonia', 1);

 Insert data into Publisher table
INSERT INTO Publisher VALUES
(1, 'Tata McGraw Hill', 'New Delhi'),
(2, 'Pearson', 'Mumbai'),
(3, 'ABC Publications', 'Pune');

 Insert data into Book table
INSERT INTO Book VALUES
(1, 'C Programming', 1, 500.00),
(2, 'Java Programming', 2, 600.00),
(3, 'Data Structures', 1, 450.00),
(4, 'Operating Systems', 3, 550.00);

 Insert data into Author table
INSERT INTO Author VALUES
(1, 'Brian Kernighan', 1),
(2, 'Dennis Ritchie', 1),
(3, 'Ken Thompson', 3),
(4, 'Shruti', 4);

 Insert data into Seller table
INSERT INTO Seller VALUES
(1, 'BooksMart', 'Pune'),
(2, 'BookShop', 'Mumbai'),
(3, 'BookStore', 'Pune');

 Insert data into Holding table
INSERT INTO Holding VALUES
(1, 1, 1, 5),
(2, 1, 3, 3),
(3, 2, 2, 2),
(4, 3, 1, 4),
(4, 1, 3, 2);

 Insert data into Issue table
INSERT INTO Issue VALUES
(1, 1, '2023-04-01'),
(2, 2, '2023-04-15'),
(3, 3, '2023-04-20'),
(4, 4, '2023-04-25'),
(4, 1, '2023-05-01');

> 1. *Students in the IT department.*

sql
SELECT s.name 
FROM Student s
JOIN Department d ON s.deptid = d.deptid
WHERE d.deptname = 'IT';


> 2. *Books in VIT library.*

sql
SELECT b.title
FROM Book b 
JOIN Holding h ON b.bid = h.bid
WHERE h.libid = (SELECT libid FROM Library WHERE libname = 'VIT Library');


> 3. *Books with less than 3 copies in VIT Library.*

sql
SELECT b.title
FROM Book b
JOIN Holding h ON b.bid = h.bid
WHERE h.libid = (SELECT libid FROM Library WHERE libname = 'VIT Library')
GROUP BY b.bid
HAVING SUM(h.nocopies) < 3;


> 4. *Sellers in the same city as VIT.*

sql
SELECT s.name
FROM Seller s
WHERE s.city = (SELECT city FROM Library WHERE libname = 'VIT Library');


> 5. *Sellers selling books to VIT.*  

sql
SELECT DISTINCT s.name
FROM Seller s
JOIN Holding h ON s.sellerid = h.sellerid
JOIN Library l ON h.libid = l.libid
WHERE l.libname = 'VIT Library';


> 6. *Books authored by Brian Kernighan, and published by Tata McGraw Hill.*

sql
SELECT b.title 
FROM Book b
JOIN Author a ON b.bid = a.bid
JOIN Publisher p ON b.pubid = p.pubid
WHERE a.aname = 'Brian Kernighan' AND p.pubname = 'Tata McGraw Hill';


> 7. *Books authored by Ken Thompson.*

sql
SELECT b.title
FROM Book b 
JOIN Author a ON b.bid = a.bid
WHERE a.aname = 'Ken Thompson';


> 8. *Books issued by Mayank.*

sql
SELECT b.title
FROM Book b
JOIN Issue i ON b.bid = i.bid  
JOIN Borrower br ON i.brid = br.brid
WHERE br.brname = 'Mayank';


> 9. *Institutes whose staff and students have issued book with bid 4444.*

sql
SELECT i.instname
FROM Institute i
JOIN Borrower br ON i.instid = br.instid
JOIN Issue iss ON br.brid = iss.brid
WHERE iss.bid = 4444
GROUP BY i.instname;


> 10. *Sellers selling to libraries in the same city.*

sql
SELECT DISTINCT s.name
FROM Seller s 
JOIN Holding h ON s.sellerid = h.sellerid
JOIN Library l ON h.libid = l.libid
WHERE s.city = l.city;
  

> 11. *Authors with books costing more than rs 500.*

sql
SELECT DISTINCT a.aname  
FROM Author a
JOIN Book b ON a.bid = b.bid
WHERE b.price > 500;


--------------------------------------------------------ASSIGNMENT 6  PL/SQL FUNCTIONS  ----------------------------------------------------------

> 1. *Write a PL/SQL function to multiply 2 numbers*


CREATE OR REPLACE FUNCTION multiply_numbers(num1 IN NUMBER, num2 IN NUMBER)
RETURN NUMBER
IS
    result NUMBER;
BEGIN
    result := num1 * num2;
    RETURN result;
END;
/

-- To test the function
DECLARE
    num1 NUMBER := 5;
    num2 NUMBER := 8;
    product NUMBER;
BEGIN
    product := multiply_numbers(num1, num2);
    DBMS_OUTPUT.PUT_LINE('Multiplication of ' || num1 || ' and ' || num2 || ' is: ' || product);
END;
/


> 2. *Write a PL/SQL function to find maximum of 2 numbers.*


CREATE OR REPLACE FUNCTION find_max(num1 IN NUMBER, num2 IN NUMBER)
RETURN NUMBER
IS
BEGIN
    IF num1 > num2 THEN
        RETURN num1;
    ELSE
        RETURN num2;
    END IF;
END;
/

-- To test the function
DECLARE
    num1 NUMBER := 10;
    num2 NUMBER := 15;
    max_num NUMBER;
BEGIN
    max_num := find_max(num1, num2);
    DBMS_OUTPUT.PUT_LINE('Maximum of ' || num1 || ' and ' || num2 || ' is: ' || max_num);
END;
/


> 3. *Write a PL/SQL function to define total number of books in SIU Library*

CREATE TABLE Library (
    libid NUMBER PRIMARY KEY,
    libname VARCHAR2(30) NOT NULL,
    city VARCHAR2(30)
);

-- Create Book table
CREATE TABLE Book (
    bid NUMBER PRIMARY KEY,
    title VARCHAR2(50) NOT NULL,
    price NUMBER
);

-- Create Holding table
CREATE TABLE Holding (
    bid NUMBER,
    libid NUMBER,
    nocopies NUMBER,
    PRIMARY KEY (bid, libid),
    FOREIGN KEY (bid) REFERENCES Book(bid),
    FOREIGN KEY (libid) REFERENCES Library(libid)
);

-- Insert data into Library table
INSERT INTO Library VALUES (1, 'SIU Library', 'Pune');
INSERT INTO Library VALUES (2, 'VIT Library', 'Mumbai');
INSERT INTO Library VALUES (3, 'COEP Library', 'Pune');

-- Insert data into Book table
INSERT INTO Book VALUES (1, 'C Programming', 500);
INSERT INTO Book VALUES (2, 'Java Programming', 600);
INSERT INTO Book VALUES (3, 'Data Structures', 450);
INSERT INTO Book VALUES (4, 'Operating Systems', 550);
INSERT INTO Book VALUES (5, 'Algorithms', 700);

-- Insert data into Holding table
INSERT INTO Holding VALUES (1, 1, 5);
INSERT INTO Holding VALUES (2, 1, 3);
INSERT INTO Holding VALUES (3, 1, 4);
INSERT INTO Holding VALUES (4, 1, 2);
INSERT INTO Holding VALUES (1, 2, 3);
INSERT INTO Holding VALUES (2, 2, 4);
INSERT INTO Holding VALUES (3, 2, 2);
INSERT INTO Holding VALUES (4, 3, 5);
INSERT INTO Holding VALUES (5, 3, 3);

COMMIT;
CREATE OR REPLACE FUNCTION total_books_siu_library
RETURN NUMBER
IS
    total_count NUMBER;
BEGIN
    SELECT SUM(nocopies)
    INTO total_count
    FROM Holding
    WHERE libid = (SELECT libid FROM Library WHERE libname = 'SIU Library');
    
    RETURN total_count;
END;
/

-- To test the function
DECLARE
    total_books NUMBER;
BEGIN
    total_books := total_books_siu_library();
    DBMS_OUTPUT.PUT_LINE('Total books in SIU Library: ' || total_books);
END;
/


> 4. *Write a PL/SQL function to find average of 4 numbers.*


CREATE OR REPLACE FUNCTION find_average(num1 IN NUMBER, num2 IN NUMBER, num3 IN NUMBER, num4 IN NUMBER)
RETURN NUMBER
IS
    average NUMBER;
BEGIN
    average := (num1 + num2 + num3 + num4) / 4;
    RETURN average;
END;
/

-- To test the function
DECLARE
    num1 NUMBER := 10;
    num2 NUMBER := 15;
    num3 NUMBER := 20;
    num4 NUMBER := 25;
    avg NUMBER;
BEGIN
    avg := find_average(num1, num2, num3, num4);
    DBMS_OUTPUT.PUT_LINE('Average of ' || num1 || ', ' || num2 || ', ' || num3 || ', ' || num4 || ' is: ' || avg);
END;
/


> 5. *Write a PL/SQL function to find factorial.*


CREATE OR REPLACE FUNCTION find_factorial(num IN NUMBER)
RETURN NUMBER
IS
    factorial NUMBER := 1;
BEGIN
    FOR i IN 1..num LOOP
        factorial := factorial * i;
    END LOOP;
    RETURN factorial;
END;
/

-- To test the function
DECLARE
    num NUMBER := 5;
    fact NUMBER;
BEGIN
    fact := find_factorial(num);
    DBMS_OUTPUT.PUT_LINE('Factorial of ' || num || ' is: ' || fact);
END;
/


> 6. *Write a PL/SQL function to find the name of the library which has the cheapest books.*

CREATE TABLE Library (
    libid NUMBER PRIMARY KEY,
    libname VARCHAR2(30) NOT NULL,
    city VARCHAR2(30)
);

-- Create Book table
CREATE TABLE Book (
    bid NUMBER PRIMARY KEY,
    title VARCHAR2(50) NOT NULL,
    price NUMBER
);

-- Create Holding table
CREATE TABLE Holding (
    bid NUMBER,
    libid NUMBER,
    nocopies NUMBER,
    PRIMARY KEY (bid, libid),
    FOREIGN KEY (bid) REFERENCES Book(bid),
    FOREIGN KEY (libid) REFERENCES Library(libid)
);

-- Insert data into Library table
INSERT INTO Library VALUES (1, 'SIU Library', 'Pune');
INSERT INTO Library VALUES (2, 'VIT Library', 'Mumbai');
INSERT INTO Library VALUES (3, 'COEP Library', 'Pune');

-- Insert data into Book table
INSERT INTO Book VALUES (1, 'C Programming', 500);
INSERT INTO Book VALUES (2, 'Java Programming', 600);
INSERT INTO Book VALUES (3, 'Data Structures', 450);
INSERT INTO Book VALUES (4, 'Operating Systems', 550);
INSERT INTO Book VALUES (5, 'Algorithms', 700);

-- Insert data into Holding table
INSERT INTO Holding VALUES (1, 1, 5);
INSERT INTO Holding VALUES (2, 1, 3);
INSERT INTO Holding VALUES (3, 1, 4);
INSERT INTO Holding VALUES (4, 1, 2);
INSERT INTO Holding VALUES (1, 2, 3);
INSERT INTO Holding VALUES (2, 2, 4);
INSERT INTO Holding VALUES (3, 2, 2);
INSERT INTO Holding VALUES (4, 3, 5);
INSERT INTO Holding VALUES (5, 3, 3);

COMMIT;

CREATE OR REPLACE FUNCTION find_cheapest_library
RETURN VARCHAR2
IS
    cheapest_library Library.libname%TYPE;
BEGIN
    SELECT l.libname
    INTO cheapest_library
    FROM Library l
    JOIN Holding h ON l.libid = h.libid
    JOIN Book b ON h.bid = b.bid
    GROUP BY l.libname
    ORDER BY MIN(b.price) ASC
    FETCH FIRST 1 ROW ONLY;
    
    RETURN cheapest_library;
END;
/

-- To test the function
DECLARE
    library_name VARCHAR2(30);
BEGIN
    library_name := find_cheapest_library();
    DBMS_OUTPUT.PUT_LINE('Library with cheapest books: ' || library_name);
END;
/



--------------------------------------------------------ASSIGNMENT 7 PROCEDURES PL/SQL----------------------------------------------------------

Here are the PL/SQL procedures for each of the given tasks. Before you execute these procedures in your environment, make sure to adjust them according to your database schema and requirements:

FIRST  CREATE TABLE
CREATE TABLE books (
    book_id NUMBER PRIMARY KEY,
    title VARCHAR2(100) NOT NULL,
    author VARCHAR2(50) NOT NULL,
    price NUMBER NOT NULL,
    seller_id NUMBER,
    library_id NUMBER,
    publisher VARCHAR2(50),
    purchase_date DATE
);

-- Insert sample data into the books table
INSERT INTO books (book_id, title, author, price, seller_id, library_id, publisher, purchase_date)
VALUES (1, 'The Great Gatsby', 'F. Scott Fitzgerald', 250, 101, 1, 'Penguin', TO_DATE('2022-03-15', 'YYYY-MM-DD'));
INSERT INTO books (book_id, title, author, price, seller_id, library_id, publisher, purchase_date)
VALUES (2, 'To Kill a Mockingbird', 'Harper Lee', 350, 102, 1, 'HarperCollins', TO_DATE('2022-04-20', 'YYYY-MM-DD'));
INSERT INTO books (book_id, title, author, price, seller_id, library_id, publisher, purchase_date)
VALUES (3, 'Pride and Prejudice', 'Jane Austen', 300, 101, 2, 'Penguin', TO_DATE('2022-05-10', 'YYYY-MM-DD'));
INSERT INTO books (book_id, title, author, price, seller_id, library_id, publisher, purchase_date)
VALUES (4, 'The Catcher in the Rye', 'J.D. Salinger', 400, 103, 1, 'Little, Brown', TO_DATE('2022-06-01', 'YYYY-MM-DD'));
INSERT INTO books (book_id, title, author, price, seller_id, library_id, publisher, purchase_date)
VALUES (5, 'The Great Gatsby', 'F. Scott Fitzgerald', 275, 102, 2, 'Penguin', TO_DATE('2022-03-20', 'YYYY-MM-DD'));
INSERT INTO books (book_id, title, author, price, seller_id, library_id, publisher, purchase_date)
VALUES (6, 'The Grapes of Wrath', 'John Steinbeck', 450, 103, 3, 'Penguin', TO_DATE('2022-07-15', 'YYYY-MM-DD'));

COMMIT;



1. Procedure to find details of books of a given library:


CREATE OR REPLACE PROCEDURE find_books_in_library(library_id IN NUMBER) AS
BEGIN
    FOR book_rec IN (SELECT * FROM books WHERE library_id = library_id) LOOP
        DBMS_OUTPUT.PUT_LINE('Book ID: ' || book_rec.book_id || ', Title: ' || book_rec.title || ', Author: ' || book_rec.author || ', Price: ' || book_rec.price);
    END LOOP;
END;
/
BEGIN
    find_books_in_library(1);
END;
/



2. Procedure to find out the total number of books written by a particular author:


CREATE OR REPLACE PROCEDURE count_books_by_author(author_name IN VARCHAR2) AS
    total_books NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_books FROM books WHERE author = author_name;
    DBMS_OUTPUT.PUT_LINE('Total books written by ' || author_name || ': ' || total_books);
END;
/

BEGIN
    count_books_by_author('ANY AUTHOR FROM THE TABLE');
END;
/



3. Procedure to increase the price of books by 10% which are sold by a particular seller to a particular library:


CREATE OR REPLACE PROCEDURE increase_price_for_seller_library(seller_id IN NUMBER, library_id IN NUMBER) AS
BEGIN
    UPDATE books
    SET price = price * 1.10
    WHERE seller_id = seller_id AND library_id = library_id;
    COMMIT;
END;
/
BEGIN
    increase_price_for_seller_library(1, 1);
END;
/



4. Procedure to count the total number of publishers who are providing books to a particular library:


CREATE OR REPLACE PROCEDURE count_publishers_for_library(library_id IN NUMBER) AS
    total_publishers NUMBER;
BEGIN
    SELECT COUNT(DISTINCT publisher) INTO total_publishers FROM books WHERE library_id = library_id;
    DBMS_OUTPUT.PUT_LINE('Total publishers providing books to library ' || library_id || ': ' || total_publishers);
END;
/
BEGIN
    count_publishers_for_library(1);
END;
/



5. Procedure to find the costliest and the cheapest books that a particular library has:

CREATE OR REPLACE PROCEDURE find_costliest_and_cheapest_books(library_id IN NUMBER) AS
    costliest_book_title books.title%TYPE;
    cheapest_book_title books.title%TYPE;
BEGIN
    SELECT title INTO costliest_book_title FROM books WHERE library_id = library_id ORDER BY price DESC FETCH FIRST 1 ROWS ONLY;
    SELECT title INTO cheapest_book_title FROM books WHERE library_id = library_id ORDER BY price FETCH FIRST 1 ROWS ONLY;

    DBMS_OUTPUT.PUT_LINE('Costliest book in library ' || library_id || ': ' || costliest_book_title);
    DBMS_OUTPUT.PUT_LINE('Cheapest book in library ' || library_id || ': ' || cheapest_book_title);
END;
/
BEGIN
    find_costliest_and_cheapest_books(1);
END;
/



6. Procedure to update the price of books by 25%, which are written by a particular author:

CREATE OR REPLACE PROCEDURE update_price_by_author(author_name IN VARCHAR2) AS
BEGIN
    UPDATE books
    SET price = price * 1.25
    WHERE author = author_name;
    COMMIT;
END;
/
BEGIN
    update_price_by_author('YOUR_AUTHOR');
END;
/



7. Procedure to provide total money spent by a particular library in purchasing books in a particular month:

CREATE OR REPLACE PROCEDURE total_money_spent_in_month(library_id IN NUMBER, month IN NUMBER, year IN NUMBER) AS
    total_money NUMBER;
BEGIN
    SELECT SUM(price) INTO total_money FROM books WHERE library_id = library_id AND EXTRACT(MONTH FROM purchase_date) = month AND EXTRACT(YEAR FROM purchase_date) = year;
    DBMS_OUTPUT.PUT_LINE('Total money spent by library ' || library_id || ' in ' || TO_CHAR(month, 'FM00') || '-' || year || ': ' || total_money);
END;
/
BEGIN
    total_money_spent_in_month(1, 5, 2024);
END;
/



--------------------------------------------------------ASSIGNMENT 8 TRIGGERS PL/SQL----------------------------------------------------------

1)

CREATE TABLE Books (
    book_id NUMBER PRIMARY KEY,
    title VARCHAR2(100),
    author VARCHAR2(100),
    price NUMBER,
    publisher VARCHAR2(100),
    library_id NUMBER,
    purchase_date DATE
);

CREATE OR REPLACE TRIGGER books_after_update_trigger
AFTER UPDATE ON Books
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Book ' || :OLD.book_id || ' updated. New price: ' || :NEW.price);
END;
/

UPDATE Books SET price = 15 WHERE book_id = 1;


2)

CREATE TABLE Booksby (
    book_id NUMBER,
    author VARCHAR2(100)
);

CREATE OR REPLACE TRIGGER booksby_before_insert_trigger
BEFORE INSERT ON Booksby
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Inserting book ' || :NEW.book_id || ' by author ' || :NEW.author);
END;
/

INSERT INTO Booksby VALUES (1, 'J.K. Rowling');


3)

CREATE TABLE Purchase (
    purchase_id NUMBER PRIMARY KEY,
    book_id NUMBER,
    price_paid NUMBER,
    purchase_date DATE
);

CREATE OR REPLACE TRIGGER purchase_after_update_trigger
AFTER UPDATE ON Purchase
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Purchase ' || :OLD.purchase_id || ' updated. New price paid: ' || :NEW.price_paid);
END;
/

UPDATE Purchase SET price_paid = 20 WHERE purchase_id = 1;



